##############################################################################
# 1. Initialize the autoconf build
##############################################################################

# Process this file with autoconf to produce a configure script.
AC_INIT([torsocks], [2.0.0-rc1],[dgoulet@ev0ke.net],[],[https://torproject.org])
AC_CONFIG_AUX_DIR([config])
AC_CANONICAL_TARGET
# Get hostname and other information.
AC_CANONICAL_HOST
AC_CONFIG_MACRO_DIR([config])

# Create a config.g file to store defines generated by configure
AC_CONFIG_HEADER([include/config.h])

# Automake initialization
AM_INIT_AUTOMAKE([foreign dist-bzip2 no-dist-gzip])

# Silent compilation. Easier to spot errors!
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S

##############################################################################
# 2. Check for some standard headers and libraries
##############################################################################

dnl Check if the C compiler accepts -Wall
AC_MSG_CHECKING(if the C compiler accepts -Wall)
OLDCFLAGS="$CFLAGS"
CFLAGS="$CFLAGS -Wall"
AC_TRY_COMPILE(,,AC_MSG_RESULT(yes),[
   CFLAGS="$OLDCFLAGS"
   AC_MSG_RESULT(no)])

dnl Checks for standard header files.
AC_HEADER_STDC

dnl Check for the dynamic loader function header
AC_CHECK_HEADER(dlfcn.h,,AC_MSG_ERROR("dlfcn.h not found"))

dnl Check for the socket header
AC_CHECK_HEADER(sys/socket.h,,AC_MSG_ERROR("sys/socket.h not found"))

dnl Check for the arpa/inet.h header (inet_ntoa and inet_addr)
AC_CHECK_HEADER(arpa/inet.h,,AC_MSG_ERROR("arpa/inet.h not found"))

dnl Check for the fcntl header
AC_CHECK_HEADER(fcntl.h,,AC_MSG_ERROR("fcntl.h not found"))

dnl Other headers we're interested in
AC_CHECK_HEADERS(unistd.h)

dnl Checks for library functions.
AC_CHECK_FUNCS(strcspn strdup strerror strspn strtol mmap strcasecmp \
   strncasecmp strtol,,[AC_MSG_ERROR("Required function not found")])

##############################################################################
# 3. Determine libraries we need to include when linking libtorsocks.
#    OpenBSD and OSX have some special requirements here.
#    Also check the host we're building on, as some of the code
#    in torsocks.c and elsewhere is platform-dependent.
##############################################################################

dnl First find the library that contains connect() (obviously
dnl the most important library for us). Once we've found it
dnl we chuck it on the end of LIBS, that lib may end up there
dnl more than once (since we do our search with an empty libs
dnl list) but that isn't a problem
OLDLIBS="${LIBS}"
LIBS=
CONNECTLIB=
for LIB in c socket; do
  AC_CHECK_LIB("${LIB}",connect,[
    CONNECTLIB="${LIB}"
    break
  ],)
done
LIBS="${OLDLIBS} -l${CONNECTLIB}"
if test "${CONNECTLIB}" = ""; then
  AC_MSG_ERROR('Could not find library containing connect()')
fi


dnl Check for socket
AC_CHECK_FUNC(socket,, [
  AC_CHECK_LIB(socket, socket,,AC_MSG_ERROR("socket function not found"))])

dnl Check for a function to convert an ascii ip address
dnl to a sin_addr.
AC_CHECK_FUNC(inet_aton, AC_DEFINE([HAVE_INET_ATON],[],[Description]), [
  AC_CHECK_FUNC(inet_addr, AC_DEFINE([HAVE_INET_ADDR],[],[Description]), [
    AC_CHECK_LIB(nsl, inet_addr, [ AC_DEFINE([HAVE_INET_ADDR],[],[Description])
                                   LIBS="${LIBS} -lnsl" ], [
		AC_MSG_ERROR("Neither inet_aton or inet_addr present")])])])


dnl Look for gethostbyname (needed by torsocks)
AC_CHECK_FUNC(gethostbyname, AC_DEFINE([HAVE_GETHOSTBYNAME],[],[Description]), [
  AC_CHECK_LIB(xnet, gethostbyname, AC_DEFINE([HAVE_GETHOSTBYNAME],[],[Description]), [
	       AC_MSG_ERROR(["gethostbyname not found, name lookups in " \
		      "torsocks disabled"])])])


dnl Do we have dlopen(3) without -ldl?
AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[return dlopen ();]])], [have_builtin_dl=yes])
AM_CONDITIONAL([HAVE_BUILTIN_DL], [test "$have_builtin_dl" = "yes"])

dnl OpenBSD needs -lpthread. It also doesn't support AI_V4MAPPED.
case $host in
*-*-openbsd*)
  AC_DEFINE(OPENBSD, 1, "Define to handle OpenBSD")
  AC_SEARCH_LIBS(pthread_create, [pthread])
  AC_SEARCH_LIBS(pthread_detach, [pthread])
    ;;
*-*-freebsd*)
  AC_DEFINE(FREEBSD, 1, "Define to handle FreeBSD")
    ;;
*-*-darwin*)
  dnl Needed to compile tests.
  dnl See https://bugs.g10code.com/gnupg/issue1292:
  dnl "On OS X (at least in 10.6 and I believe starting at 10.3) the DNS resolution
  dnl services fail to compile.  This is a result of the addition of BIND9 compatible
  dnl resolution libraries on OS X that are being picked up by the configure script
  dnl instead of -lresolv causing the tests for useable resolution services to fail
  dnl thus disabling features like pka auto lookup."
  LIBS="-lresolv $LIBS"
    ;;
esac


##############################################################################
# 3. Check if we need to use --enable-oldmethod, regardless of what was
#    given on the ./configure command line.
##############################################################################

dnl If we're using gcc here define _GNU_SOURCE
AC_MSG_CHECKING(for RTLD_NEXT from dlfcn.h)
AC_EGREP_CPP(yes,
[
 #include <dlfcn.h>
 #ifdef RTLD_NEXT
	yes
 #endif
], [
  AC_MSG_RESULT(yes)
], [
  AC_MSG_RESULT(no)
  AC_MSG_CHECKING(for RTLD_NEXT from dlfcn.h with _GNU_SOURCE)
  AC_EGREP_CPP(yes,
  [
   #define _GNU_SOURCE
   #include <dlfcn.h>
   #ifdef RTLD_NEXT
	yes
   #endif
  ], [
    AC_MSG_RESULT(yes)
    AC_DEFINE([USE_GNU_SOURCE],[],[Description])
  ], [
    AC_MSG_RESULT(no)
    AC_DEFINE([USE_OLD_DLSYM],[],[Description])
    oldmethod="yes"
  ])   
])

if test "x${enable_envconf}" = "x"; then
  AC_DEFINE([ALLOW_ENV_CONFIG],[],[Description])
fi

##############################################################################
# 3. If --enable-oldmethod was requested, perform the necessary checks
##############################################################################

if test "${enable_oldmethod}" = "yes"; then
  AC_DEFINE([USE_OLD_DLSYM],[],[Description])
  oldmethod="yes"
fi

dnl If we have to use the old method of overriding connect (i.e no
dnl RTLD_NEXT) we need to know the location of the library that
dnl contains connect(), select(), poll() and close()
if test "${oldmethod}" = "yes"; then
  dnl We need to find the path to the library, to do
  dnl this we use find on the usual suspects, i.e /lib and
  dnl /usr/lib

  dnl Check that find is available, it should be somehere
  dnl in the path
  AC_CHECK_PROG(FIND, find, find)
  if test "${FIND}" = ""; then
    AC_MSG_ERROR('find not found in path')
  fi

  dnl Find tail, it should always be somewhere in the path
  dnl but for safety's sake
  AC_CHECK_PROG(TAIL, tail, tail)
  if test "${TAIL}" = ""; then
    AC_MSG_ERROR('tail not found in path')
  fi

  dnl Now find the library we need
  AC_MSG_CHECKING(location of lib${CONNECTLIB}.so)
  LIBCONNECT=
  for DIR in '/lib' '/usr/lib'; do
    if test "${LIBCONNECT}" = ""; then
      LIBCONNECT=`$FIND $DIR -name "lib${CONNECTLIB}.so.?" 2>/dev/null | $TAIL -1`
    fi
  done
  AC_DEFINE_UNQUOTED([LIBCONNECT],["${LIBCONNECT}"],[Description])
  if test "${LIBCONNECT}" = ""; then
     AC_MSG_ERROR("not found!")
  fi

  AC_MSG_RESULT($LIBCONNECT)

  dnl Now find the resolve library we need
  AC_MSG_CHECKING(location of libresolv.so)
  LIBRESOLV=
  for DIR in '/lib' '/usr/lib'; do
    if test "${LIBRESOLV}" = ""; then
      LIBRESOLV=`$FIND $DIR -name "libresolv.so.?" 2>/dev/null | $TAIL -1`
    fi
  done
  AC_DEFINE_UNQUOTED([LIBRESOLV],["${LIBRESOLV}"],[Description])
  if test "${LIBRESOLV}" = ""; then
     AC_MSG_ERROR("not found!")
  fi

  AC_MSG_RESULT($LIBRESOLV)

  dnl close() should be in libc, find it
  AC_MSG_CHECKING(location of libc.so)
  LIBC=
  for DIR in '/lib' '/usr/lib'; do
    if test "${LIBC}" = ""; then
      LIBC=`$FIND $DIR -name "libc.so.?" 2>/dev/null | $TAIL -1`
    fi
  done

  AC_DEFINE_UNQUOTED([LIBC],["${LIBC}"],[Description])
  if test "${LIBC}" = ""; then
     AC_MSG_ERROR("not found!")
  fi

  AC_MSG_RESULT($LIBC)
fi

##############################################################################
# 5. Determine how to preload libtorsocks.so on this system.
#    On Linux this is with the LD_PRELOAD variable, on OSX
#    we need to use DYLD_INSERT_LIBRARIES.
##############################################################################

# This variable is used for the LDFLAGS in test/Makefile.am
TESTLDFLAGS="$LDFLAGS"
AC_SUBST(TESTLDFLAGS)

# Version information for libtorsocks
TORSOCKSLDFLAGS="$LDFLAGS -version-info 1:0:0"

dnl Linker checks for Mac OSX, which uses DYLD_INSERT_LIBRARIES
dnl instead of LD_PRELOAD
case "$host_os" in
darwin*)
    dnl Check if the linker accepts -dynamiclib; necessary on Mac OS X
    AC_MSG_CHECKING(if the linker accepts -dynamiclib)
    OLDLDFLAGS="$TORSOCKSLDFLAGS"
    TORSOCKSLDFLAGS="$TORSOCKSLDFLAGS -dynamiclib"
    AC_TRY_COMPILE(,,AC_MSG_RESULT(yes),[
       TORSOCKSLDFLAGS="$OLDLDFLAGS"
       AC_MSG_RESULT(no)])

    # dnl Check if the linker accepts -multiply_defined suppress; necessary on Mac OS X
    # AC_MSG_CHECKING(if the linker accepts -multiply_defined suppress)
    # OLDLDFLAGS="$LDFLAGS"
    # LDFLAGS="$LDFLAGS -multiply_defined suppress"
    # AC_TRY_COMPILE(,,AC_MSG_RESULT(yes),[
    #    LDFLAGS="$OLDLDFLAGS"
    #    AC_MSG_RESULT(no)])

    dnl Check if the linker accepts -single_module; necessary on Mac OS X
    AC_MSG_CHECKING(if the linker accepts -single_module)
    OLDLDFLAGS="$TORSOCKSLDFLAGS"
    SHLIB_EXT="so"
    LDPRELOAD="LD_PRELOAD"
    TORSOCKSLDFLAGS="$TORSOCKSLDFLAGS -single_module"
    AC_TRY_COMPILE(,,
       [
          SHLIB_EXT="dylib"
          LDPRELOAD="DYLD_INSERT_LIBRARIES"
          AC_MSG_RESULT(yes)
       ], [
          TORSOCKSLDFLAGS="$OLDLDFLAGS"
          AC_MSG_RESULT(no)
       ]
    )

    ;;
*)
    SHLIB_EXT="so"
    LDPRELOAD="LD_PRELOAD"
    ;;
esac

AC_SUBST(SHLIB_EXT)
AC_SUBST(LDPRELOAD)
AC_SUBST(TORSOCKSLDFLAGS)

##############################################################################
# 7. Determine where the install should write the default configuration
#    file and where libtorsocks should read it from by default.
##############################################################################

if test "x$prefix" = "xNONE"; then
  prefix=$ac_default_prefix
fi

if test "x$CONFDIR" = "x"; then
  CONFDIR=`eval echo $sysconfdir`
fi
AC_SUBST(CONFDIR)
AH_TEMPLATE([CONFDIR],[torsocks configuration directory])
AC_DEFINE_UNQUOTED(CONFDIR,"$CONFDIR")

AC_ARG_WITH(conf,
[  --with-conf=<file>      location of configuration file (${CONFDIR}/torsocks.conf default)],[
if test "${withval}" = "yes" ; then
  AC_MSG_ERROR("--with-conf requires the location of the configuration file as an argument")
else
  AC_DEFINE_UNQUOTED([CONF_FILE], ["${withval}"],[Description])
fi
], [
  AC_DEFINE_UNQUOTED([CONF_FILE], ["${CONFDIR}/torsocks.conf"],[Description])
])

##############################################################################
# 8. Clean up and create some supporting scripts from their *.in files
##############################################################################

AC_LANG_C
AC_PROG_CC
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)
AC_ENABLE_SHARED
AC_ENABLE_STATIC

DEFAULT_INCLUDES="-I\$(top_srcdir) -I\$(top_builddir) -I\$(top_builddir)/src -I\$(top_builddir)/include -include config.h"
AC_SUBST(DEFAULT_INCLUDES)

AC_CONFIG_FILES([
	Makefile
	src/Makefile
	src/bin/Makefile
	src/bin/torsocks
	src/common/Makefile
	src/lib/Makefile
	tests/Makefile
	tests/utils/Makefile
	tests/utils/tap/Makefile
	doc/Makefile
])

AC_OUTPUT
